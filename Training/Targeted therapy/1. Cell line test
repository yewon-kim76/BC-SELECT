# Essentiality and drug screen

rm(list=ls())

# Load libraries 
library(optparse);library(parallel);library(tidyverse)

# Related functions 
molecdata_midpoint <- function(molecdata) {
  median_molecdata <- median(molecdata, na.rm = TRUE)
  if ((median_molecdata == 1 | median_molecdata == 0 | is.na(median_molecdata))) {
    median_molecdata <- 0.5}
  median_molecdata }

split_at_midpoint <- function(molecdata, fitness) {
  median_molecdata <- molecdata_midpoint(molecdata)
  low <- fitness[molecdata <= median_molecdata]
  high <- fitness[molecdata > median_molecdata]
  list(low = low, high = high)}

split_one_two <- function(fitness, molecdata_q2) {
  zero <- fitness[molecdata_q2 == 0]
  two <- fitness[molecdata_q2 == 2]
  list(zero = zero, two = two)}

bidirectional_wilcox_test <- function(x, y) {
  less <- wilcox_test_na(x, y, alternative1 = "less")
  greater <- wilcox_test_na(x, y, alternative1 = "greater")
  list(less = less, greater = greater)}

lm_summary_coef <- function(form = forumlaString, data) {
  tryCatch(
    {model <- summary(lm(as.formula(form), data))
      if (any(model$aliased)) {
        matrix(as.numeric(NA),
               nrow = length(model$aliased),
               ncol = ncol(model$coefficients),
               dimnames = list(names(model$aliased), colnames(model$coefficients)) )
      } else {
        model$coefficients}},
    error = function(e) {
      matrix(NA, nrow = 4, ncol = 4)} ) }

wilcox_test_na <- function(x, y, alternative1, paired = FALSE) { # Wilcox test, returns p-value
  tryCatch(
    wilcox.test( x, y, alternative = alternative1, paired = paired)$p.value,
    error = function(e) NA ) }

# Function
essentiality <- function(screen = screen_data,
                         sl_pair = sl_pair,
                         data_slots = c("mrna"),
                         datasets = "",
                         q2 = FALSE) {
  
  results <- list()  # results columns

  if (sum(is.na(sl_pair)) == 0) { # make sure the sl_pair does not contain NA values
    gene_a <- sl_pair["GENE_A"]; gene_b <- sl_pair["GENE_B"]
    
  results["GENE_A"] <- gene_a; results["GENE_B"] <- gene_b
  for (set in datasets) {
    fitness <- screen[[set]][["gene_fitness"]] # for each data modality
    for (slot in data_slots) {  # get essentiality/gene fitness (sometimes also referred to gene effect score for A -> B
    model_data <- screen[[set]][["meta"]]
    molcdata <- screen[[set]][[slot]] # molecdata is either expression
        
    model_data$GENE_A_fit <- fitness[gene_a, ]
    model_data$GENE_A_exp <- molcdata[gene_a, ]
    model_data$GENE_B_fit <- fitness[gene_b, ]
    model_data$GENE_B_exp <- molcdata[gene_b, ]
        
    formulaString1 <- paste("GENE_B_fit ~ GENE_A_exp") # unadjusted A -> B
    a_b_lm_unadj <- lm_summary_coef(form = formulaString1, data = model_data)
    coef1_unadj <- a_b_lm_unadj[2, 1]; pval1_unadj <- a_b_lm_unadj[2, 4]
        
    results[paste("SL_A_B_SR_UD_linear_unadj", slot, set, sep = "_")] <-
    ifelse(coef1_unadj > 0, pval1_unadj, ifelse(is.na(coef1_unadj), NA, 1))
        
    results[paste("SDL_UD_SR_DD_linear_unadj", slot, set, sep = "_")] <-
    ifelse(coef1_unadj < 0, pval1_unadj, ifelse(is.na(coef1_unadj), NA, 1))
    
    formulaString3 <- paste("GENE_A_fit ~ GENE_B_exp")
        b_a_lm_unadj <- lm_summary_coef( form = formulaString3, data = model_data)
        coef2_unadj <- b_a_lm_unadj[2, 1]; pval2_unadj <- b_a_lm_unadj[2, 4]
        
    results[paste("SL_B_A_SR_DU_linear_unadj", slot, set, sep = "_")] <-
          ifelse(coef2_unadj > 0, pval2_unadj, ifelse(is.na(coef2_unadj), NA, 1))
    
    results[paste("SDL_DU_SR_DD_linear_unadj", slot, set, sep = "_")] <-
          ifelse(coef2_unadj < 0, pval2_unadj, ifelse(is.na(coef2_unadj), NA, 1))
    
    # This is imporatnt if looking at a binarized fusion gene or something where the "expression" is a 0 or 1
    results[[paste("GENE_A", set, "fit_score#cl", sep = "_")]] <- sum(!is.na(fitness[gene_a, ]))
    results[[paste("GENE_B", set, "fit_score#cl", sep = "_")]] <- sum(!is.na(fitness[gene_b, ]))
        
    fit_ab <- split_at_midpoint( # molecdata is expression data
          molecdata = screen[[set]][[slot]][gene_a, ], fitness = fitness[gene_b, ])
        
    test <- bidirectional_wilcox_test(fit_ab$low, fit_ab$high)
    results[paste("SL_A_B_SR_UD_wilcox", slot, set, sep = "_")] <- test$less
    results[paste("SDL_UD_SR_DD_wilcox", slot, set, sep = "_")] <- test$greater
        
    fit_ba <- split_at_midpoint( # change direction B -> A
          molecdata = screen[[set]][[slot]][gene_b, ], fitness = fitness[gene_a, ])
        
    test <- bidirectional_wilcox_test(fit_ba$low, fit_ba$high)
    results[paste("SL_B_A_SR_DU_wilcox", slot, set, sep = "_")] <- test$less
    results[paste("SDL_DU_SR_DD_wilcox", slot, set, sep = "_")] <- test$greater} 
    
    if (q2) { q2_slots <- paste0(data_slots, "_q2") # q2 slots
       for (slot in q2_slots) {
        b_given_a <- split_one_two(
          fitness = fitness[gene_b, ], molecdata_q2 = screen[[set]][[slot]][gene_a, ])
        
        test <- bidirectional_wilcox_test(b_given_a$zero, b_given_a$two)
        results[paste("SL_A_B_SR_UD_wilcox", slot, set, sep = "_")] <- test$less
        results[paste("SDL_UD_SR_DD_wilcox", slot, set, sep = "_")] <- test$greater
        
        a_given_b <- split_one_two( # change direction B -> A
          fitness = fitness[gene_a, ], molecdata_q2 = screen[[set]][[slot]][gene_b, ])
        
        test <- bidirectional_wilcox_test(a_given_b$zero, a_given_b$two)
        results[paste("SL_B_A_SR_DU_wilcox", slot, set, sep = "_")] <- test$less
        results[paste("SDL_DU_SR_DD_wilcox", slot, set, sep = "_")] <- test$greater }}
    
    } }
   return(results)}

# Fit
screen <- readRDS("/data/kimy35/SELECT/select_targeted/data/new_essentiality_object_joo.rds")
drug_target = "CYP19A1" # define drug targets
ess_result <- NULL; # save all results

for(i in 1:length(screen$prob_ach_new2$genes)){
  gene <- screen$prob_ach_new2$genes[i] # all possible candidate partner genes
  test <- essentiality(screen = screen,
                      sl_pair = c(GENE_A = drug_target, GENE_B = gene),
                      data_slots = c("mrna"), 
                      datasets = c("prob_ach_new2", "prob_ach_new1", "prob_ach_old1", 
                                   "prob_mar_new1", "prob_mar_old1"),
                      q2 = TRUE)
  ess_result <- rbind(ess_result, data.frame(test))
  print(i) }

setwd("/data/kimy35/SELECT/select_targeted/Target_training_BC-SELECT")
saveRDS(ess_result, file = "CYP19A1_essentiality.rds") 

rm(gene, i, test)

# Drug target (continued from Essentiality)

# Load libraries 
library(optparse);library(parallel);library(tidyverse)

# Related functions 
min_na <- function(values) {
  ifelse(all(is.na(values)), as.numeric(NA), min(values, na.rm = TRUE)) }

# Function 
drug_screen <- function(screen = screen_data,
                        sl_pair = sl_pairs,
                        data_slots = "mrna",
                        datasets = "") {
  
  results <- list()  # results columns
  
  if (sum(is.na(sl_pair)) == 0) {  # Make sure the sl_pair does not contain NA values
    results[["GENE_A"]] <- sl_pair["GENE_A"]
    results[["GENE_B"]] <- sl_pair["GENE_B"]
    
  for (set in datasets) {
    drugs <- screen[[set]][["drug_targets"]][, "drugs"]  # for each data modality
    gene_targets <- screen[[set]][["drug_targets"]][, "gene_targets"]
    drugs_target_gene_a <- drugs[gene_targets == sl_pair[["GENE_A"]]]
    drugs_target_gene_b <- drugs[gene_targets == sl_pair[["GENE_B"]]]
      
    for (slot in data_slots) {
      slot_q2_matrix <- screen[[set]][[paste0(slot, "_q2")]]
      # use the q2 row for gene b to split for wilcox A -> B.
      molecdata <- slot_q2_matrix[sl_pair["GENE_B"], ]
        
      drug_df_sl_a_b <- double(); drug_df_sdl_du <- double()
      for (drug in drugs_target_gene_a) {
        # get essentiality/gene fitness (sometimes also referred to gene effect score for A -> B)
        fitness <- screen[[set]][["gene_fitness"]][drug, , drop = TRUE]
        pval <- bidirectional_wilcox_test(fitness[molecdata <= 0], fitness[molecdata >= 1])
          
        drug_df_sl_a_b[paste("SL_A_B_SR_DU", slot, set, drug, sep = "_")] <- pval$less
        drug_df_sdl_du[paste("SDL_DU_SR_DD", slot, set, drug, sep = "_")] <- pval$greater }
        
      molecdata <- slot_q2_matrix[sl_pair["GENE_A"], ]   # split for wilcox B -> A
        
      drug_df_sl_b_a <- double(); drug_df_sdl_ud <- double()
      for (drug in drugs_target_gene_b) {
        fitness <- screen[[set]][["gene_fitness"]][drug, , drop = TRUE]
        pval <- bidirectional_wilcox_test(fitness[molecdata <= 0], fitness[molecdata >= 1])
          
        drug_df_sl_b_a[paste("SL_B_A_SR_DU", slot, set, drug, sep = "_")] <- pval$less
        drug_df_sdl_ud[paste("SDL_UD_SR_DD", slot, set, drug, sep = "_")] <- pval$greater }
        
        results[[paste("SL_A_B_SR_DU", slot, set, sep = "_")]] <- min_na(drug_df_sl_a_b)
        results[[paste("SDL_DU_SR_DD", slot, set, sep = "_")]] <- min_na(drug_df_sdl_du)
        results[[paste("SL_B_A_SR_DU", slot, set, sep = "_")]] <- min_na(drug_df_sl_b_a)
        results[[paste("SDL_UD_SR_DD", slot, set, sep = "_")]] <- min_na(drug_df_sdl_ud) } } }
  return(results) }


# Fit
drug_screen_result <- NULL;
drug_screen_data <- readRDS("/data/kimy35/SELECT/select_targeted/data/new_drug_object_joo.rds")

for(i in 1:length(drug_screen_data$basu$genes)){
  gene <- drug_screen_data$basu$genes[i]
  test <- drug_screen( screen = drug_screen_data,
                       sl_pair = c(GENE_A = drug_target, GENE_B = gene),
                       data_slots = c("mrna"), 
                       datasets = c("basu", "gdsc", "ccle") )
  drug_screen_result <- rbind(drug_screen_result, data.frame(test))
  print(i) }

setwd("/data/kimy35/SELECT/select_targeted/Target_training_BC-SELECT")
saveRDS(drug_screen_result, file = "CYP19A1_drug_screen.rds") # save the training results

rm(i, gene, test, screen, drug_screen_data)
