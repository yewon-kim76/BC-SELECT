# synthetic dosage lethality (SDL)
# In order to expand drug coverage in targeted therapy, we are exploring additional SDL interactions.
# SDL is a genetic phenomenon observed when there is an imbalance in the dosage of two genes within a cancer cell. 
# It occurs when the overexpression of one gene becomes lethal to cell viability only in the context of the under-expression of another gene. 


rm(list=ls())

# Cox regression (SDL)
# Load libraries ---------------------------------------------------------------
library(tidyverse); library(optparse); library(survival); library(parallel)

# Related functions ----------------------------------------------
qnorm_normalization <- function(x) {
  # Saving x_back allows us to keep NAs that rank() removes.
  x_back <- x
  x <- rank(x, ties.method = "average", na.last = NA)
  x <- qnorm(x / (length(x) + 1))
  x_back[!is.na(x_back)] <- x
  return(x_back)}

# Functions -------------------------------------------------------------------
cox_sdl_pair <- function(sdl_pair = c(GENE_A = "ALK", GENE_B = "LINC00115"), # Define genes
                         prob = data, # Define RNA-seq data
                         clinical = clinical, # Define phenotype data
                         interaction = "SDL", 
                         survival = "survival"){
  rows <- list()
  
  if (sdl_pair["GENE_A"] %in% prob$genes & sdl_pair["GENE_B"] %in% prob$genes) {
  # Only include cases where SDL pairs are in dataset
  # Build dataframe for cox regression (all variables and covariates)
  cox_df <- clinical %>%
    add_column(
      g1 = prob$mrna_qnorm[sdl_pair["GENE_A"], ], g2 = prob$mrna_qnorm[sdl_pair["GENE_B"], ],
      g1_q2 = prob$mrna_q2[sdl_pair["GENE_A"], ], g2_q2 = prob$mrna_q2[sdl_pair["GENE_B"], ] )
    cox_df <- cox_df[complete.cases(cox_df), ] # Only include samples where all covariates and cov +g1 +g2 are non NA.
    
  if (nrow(cox_df) > 10) { # Must have at least 10 patients with all variables going into model
 
  cox_df <- cox_df %>% mutate(cov = as.numeric(g1_q2 == 0 & g2_q2 == 2))  # cov=1 if gene_a low and gene_b high
  
  # Model 1: Model without controlling for confounding factors
  uncntrl <- coxph(Surv(time, status) ~ cov, data = cox_df); model1 <- summary(uncntrl)
      
  # Add possible covariates
  var <- cox_df %>% select(any_of(c("types","age","sex","race","stage")))
  f1.list = names(var) # Select any possible variables, and change to strata
  f1.list <- ifelse(f1.list %in% c("types","sex","race","stage"), paste("strata(",f1.list,")", sep="" ), f1.list) 
      
  # Model 2: Reduced model, without the interaction term (cov)
  formulaString <- paste( "Surv(time, status) ~", paste(f1.list, collapse = " + ") )
  cntrl_reduced <- coxph(as.formula(formulaString), data = cox_df)
  model2 <- summary(cntrl_reduced)
      
  # Model 3: Full model, with interaction term (cov)
  formulaString <- paste( "Surv(time, status) ~ cov +", paste(f1.list, collapse = " + ") )
  cntrl_full <- coxph(as.formula(formulaString), data = cox_df)
  model3 <- summary(cntrl_full)
      
  # In the following tests df, Save coefficients and p-values
  # lrt = Log likelihood ratio test. To test the significance of the interaction, 
  # we need to compute the difference between the log likelihood statistic of the reduced model (model 2) and the full model (model 3).
  
  cov_lrt <- (2) * (model3$loglik[2] - model2$loglik[2]) 
    res <- list(
      test = "cov",
      GENE_A = drug_target,
      GENE_B = sdl_pair["GENE_B"],
      coef_unadj = model1$coefficients[1], # cov coefficient, without covariates model
      pval_unadj = model1$coefficients[1, 5], # cov p-value, without covariates model
      coef_adj = model3$coefficients[1], # cov coefficient, with covariates model
      pval_adj = model3$coefficients[1, 5], # cov p-value, with covariates model
      lrt = cov_lrt,
      pval_lrt = 1 - pchisq(cov_lrt, df = 1),
      pts_w = sum(cox_df$cov == 1),
      pts_wo = sum(cox_df$cov == 0),
      events_w = sum(cox_df$status == 1 & cox_df$cov == 1),
      events_wo = sum(cox_df$status == 1 & cox_df$cov == 0))
      
      rows[[length(rows) + 1]] <- res } }
  bind_rows(rows) }

# fit--------------------------------------------------------------------
# patient level data: TCGA and METABRIC
load("/data/kimy35/prob.curtis.extended.RData") # METABRIC
load("/gpfs/gsfs12/users/kimy35/SELECT/select_immuno/data/prob.TCGA.ICI.RData") # TCGA 

drug_target = "ERBB2" 
cox_bc_results <- NULL;
for(i in 1:19001){
  gene = BC.TCGA.list$genes[i] # ALL candidates of SDL partner genes
  test_TCGA <- cox_sdl_pair(sdl_pair = c(GENE_A = drug_target, GENE_B = gene),
                            prob = metabric.list, # RNA-seq data
                            clinical = metabric.surv, # phynotype data
                            interaction = "SDL",
                            survival = "survival")
  cox_bc_results <- rbind(cox_bc_results, test_TCGA)
  print(i)}

saveRDS(cox_bc_results, file = "ERBB2_SDL_cox_meta_covariates.rds") # Save the results

rm(cox_bc_results, test_TCGA, gene, i)
